<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Sjiay1023.github.io/"/>
  <updated>2019-09-20T09:08:04.179Z</updated>
  <id>https://Sjiay1023.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot整合SpringSecurity+jwt+redis实现登录鉴权</title>
    <link href="https://Sjiay1023.github.io/2019/09/18/SpringBoot%E6%95%B4%E5%90%88SpringSecurity+jwt+redis%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E9%89%B4%E6%9D%83/"/>
    <id>https://Sjiay1023.github.io/2019/09/18/SpringBoot整合SpringSecurity+jwt+redis实现登录鉴权/</id>
    <published>2019-09-18T08:35:22.000Z</published>
    <updated>2019-09-20T09:08:04.179Z</updated>
    
    <content type="html"><![CDATA[<p>本项目是SpringBoot+Mybatis实现的后端项目,相关测试都使用postman进行了测试，主要的思想是利用token<br>作为前后端交互身份验证信息，通过设置token的刷新时间来保证token的安全性，同时将token放入redis中，<br>并建立黑名单，将过期以及登出的token移到黑名单，使用SpringSecurity实现对用户的认证鉴权。</p><a id="more"></a><h1 id="一、主要环境"><a href="#一、主要环境" class="headerlink" title="一、主要环境"></a>一、主要环境</h1><p>编译器使用Idea，项目使用SpringBoot+Maven进行构建，SpringSecurity进行认证和授权，其中还涉及到的<br>框架包括Mybatis、Redis、Druid、JWT、Lombok、Logback。其中Redis的安装以及Idea中集成Lombok等插件<br>不单独进行展开，可自行百度进行环境准备。<br>[github项目地址] (<a href="https://github.com/Sjiay1023/permission" target="_blank" rel="noopener">https://github.com/Sjiay1023/permission</a>)</p><h1 id="二、系统机构图"><a href="#二、系统机构图" class="headerlink" title="二、系统机构图"></a>二、系统机构图</h1><p><img src="../../../../images/flow.png" alt="系统架构图"></p><h1 id="三、SpringBoot准备"><a href="#三、SpringBoot准备" class="headerlink" title="三、SpringBoot准备"></a>三、SpringBoot准备</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>我是使用IDEA创建项目，jdk选择1.8</p><p><img src="../../../../images/new.png" alt="新建项目"></p><p>选择maven构建，相关名字自行命名</p><p><img src="../../../../images/new2.jpg" alt="新建项目"></p><p>添加依赖，后面redis，sercurity等依赖后续再加，我这边使用的SpringBoot版本是2.1.2.RELEASE，注意改成<br>你自己想要的SpringBoot版本</p><p><img src="../../../../images/new3.jpg" alt="新建项目"></p><p>ok，最简单的一个SpringBoot项目就搭建完成</p><p>此处直接将后面需要用到的依赖全部一并给出，分别为lombok、redis、fastjson、jwt、druid,Security的依赖<br>这边暂时没有加上，到后面再加防止获取用户列表报错<br>具体pom文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.18.8&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.2.46&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;0.9.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><p>包括了数据源、Mybatis、redis、druid等的完整配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /permission</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT</span><br><span class="line">  application:</span><br><span class="line">    name: permission</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/ssm?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    druid:</span><br><span class="line">      initial-size: 3</span><br><span class="line">      min-idle: 3</span><br><span class="line">      max-active: 10</span><br><span class="line">      max-wait: 60000</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        login-username: admin</span><br><span class="line">        login-password: admin</span><br><span class="line">      filter:</span><br><span class="line">        stat:</span><br><span class="line">          log-slow-sql: true</span><br><span class="line">          slow-sql-millis: 2000</span><br><span class="line">  redis:</span><br><span class="line">    database: 0</span><br><span class="line">    host: 192.168.46.128</span><br><span class="line">    port: 6379</span><br><span class="line">    password: 123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  type-aliases-package: com.sjiay.security.permission.entity</span><br><span class="line">  mapper-locations: classpath*:/mapper/**/*Mapper.xml</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    use-generated-keys: true</span><br><span class="line">    default-fetch-size: 100</span><br><span class="line">    default-statement-timeout: 30</span><br><span class="line"></span><br><span class="line">#自定义参数，可以迁移走</span><br><span class="line">token:</span><br><span class="line">  #token失效时间（不是refreshToken）(这是自定义的)(秒)</span><br><span class="line">  expirationSeconds: 300</span><br><span class="line">  #默认7天登录有效(根据业务更改)</span><br><span class="line">  validTime: 7</span><br></pre></td></tr></table></figure><p>context-path路径的设置时为了后续对Url的统一拦截，注意SpringBoot2.0之后把server.context-path<br>改成了server.servlet.context-path,这个根据自己版本修改。</p><h1 id="四、简单Demo实现"><a href="#四、简单Demo实现" class="headerlink" title="四、简单Demo实现"></a>四、简单Demo实现</h1><p>相关配置完成之后，我们就来先实现一个简单的Demo主要功能就是查询数据库User列表，以及一个简单的注册</p><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.controller;</span><br><span class="line"></span><br><span class="line">import com.sjiay.permission.entity.DemoEntity;</span><br><span class="line">import com.sjiay.permission.service.DemoService;</span><br><span class="line">import com.sjiay.common.Enums.ResultEnum;</span><br><span class="line">import com.sjiay.common.VO.ResultVO;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/test&quot;)</span><br><span class="line">public class DemoController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DemoService demoService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取User列表</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getUser&quot;)</span><br><span class="line">    public List&lt;DemoEntity&gt; getUser()&#123;</span><br><span class="line">        List&lt;DemoEntity&gt; result = demoService.getUser();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 简单注册功能</span><br><span class="line">     * @param username</span><br><span class="line">     * @param password</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/register&quot;)</span><br><span class="line">    public Map&lt;String, Object&gt; register(String username, String password)&#123;</span><br><span class="line">        demoService.register(username,password);</span><br><span class="line">        return ResultVO.result(ResultEnum.SUCCESS,true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到上面controller的返回结果是做了一些封装，所以这边我们穿插一下先来实现几个返回格式的类。</p><h2 id="返回格式封装"><a href="#返回格式封装" class="headerlink" title="返回格式封装"></a>返回格式封装</h2><p>为了整个项目结构清晰，把一些公用的以及后面涉及的拦截相关的类我们单独放到一个包里面，在 permission<br>(新建项目时候的最底层包名)的同级目录下新建一个common包，具体common下又分成很多子包，具体看后面类的<br>package 所指目录，或到源码下查看。<br>两个类如下：<br>ResultVO</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.VO;</span><br><span class="line"></span><br><span class="line">import com.sjiay.common.Enums.ResultEnum;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 返回的格式</span><br><span class="line"> */</span><br><span class="line">public final class ResultVO implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1725159680599612404L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回msg，object，以及token</span><br><span class="line">     * 返回的code为默认</span><br><span class="line">     * @param message</span><br><span class="line">     * @param data</span><br><span class="line">     * @param jwtToken</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public final static  Map&lt;String, Object&gt; success(String message, Object data,String jwtToken,Boolean success) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;jwtToken&quot;,jwtToken);</span><br><span class="line">        map.put(&quot;code&quot;, ResultEnum.SUCCESS.getCode());</span><br><span class="line">        map.put(&quot;message&quot;, message);</span><br><span class="line">        map.put(&quot;success&quot;,success);</span><br><span class="line">        map.put(&quot;data&quot;, data);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回object，以及token</span><br><span class="line">     * 返回的msg，code为默认</span><br><span class="line">     * @param data</span><br><span class="line">     * @param jwtToken</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public final static  Map&lt;String, Object&gt; success(Object data,String jwtToken) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;jwtToken&quot;,jwtToken);</span><br><span class="line">        map.put(&quot;code&quot;, ResultEnum.SUCCESS.getCode());</span><br><span class="line">        map.put(&quot;message&quot;, ResultEnum.SUCCESS.getMessage());</span><br><span class="line">        map.put(&quot;data&quot;, data);</span><br><span class="line">        map.put(&quot;success&quot;,true);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回默认的信息</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public final static  Map&lt;String, Object&gt; success() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;jwtToken&quot;,null);</span><br><span class="line">        map.put(&quot;code&quot;, ResultEnum.SUCCESS.getCode());</span><br><span class="line">        map.put(&quot;message&quot;, ResultEnum.SUCCESS.getMessage());</span><br><span class="line">        map.put(&quot;data&quot;, null);</span><br><span class="line">        map.put(&quot;success&quot;,true);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final static  Map&lt;String, Object&gt; failure(int code, String message,Object data) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;code&quot;, code);</span><br><span class="line">        map.put(&quot;message&quot;, message);</span><br><span class="line">        map.put(&quot;data&quot;, data);</span><br><span class="line">        map.put(&quot;success&quot;,false);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final static  Map&lt;String, Object&gt; failure(int code, String message) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;code&quot;, code);</span><br><span class="line">        map.put(&quot;message&quot;, message);</span><br><span class="line">        map.put(&quot;data&quot;, null);</span><br><span class="line">        map.put(&quot;success&quot;,false);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final static  Map&lt;String, Object&gt; failure(ResultEnum respCode, Object data, Boolean success) &#123;</span><br><span class="line">        return getStringObjectMap(respCode, data,success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final static  Map&lt;String, Object&gt; failure(ResultEnum respCode, Boolean success) &#123;</span><br><span class="line">        return getStringObjectMap(respCode,success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 成功返回特定的状态码和信息</span><br><span class="line">     * */</span><br><span class="line">    public final static  Map&lt;String, Object&gt; result(ResultEnum respCode, Object data, Boolean success) &#123;</span><br><span class="line">        return getStringObjectMap(respCode, data,success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static  Map&lt;String, Object&gt; getStringObjectMap(ResultEnum respCode, Object data, Boolean success) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;code&quot;, respCode.getCode());</span><br><span class="line">        map.put(&quot;message&quot;, respCode.getMessage());</span><br><span class="line">        map.put(&quot;data&quot;, data);</span><br><span class="line">        map.put(&quot;success&quot;,success);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 成功返回特定的状态码和信息</span><br><span class="line">     * */</span><br><span class="line">    public final static  Map&lt;String, Object&gt; result(ResultEnum respCode, Boolean success) &#123;</span><br><span class="line">        return getStringObjectMap(respCode,success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Map&lt;String, Object&gt; getStringObjectMap(ResultEnum respCode, Boolean success) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;code&quot;, respCode.getCode());</span><br><span class="line">        map.put(&quot;message&quot;, respCode.getMessage());</span><br><span class="line">        map.put(&quot;data&quot;, null);</span><br><span class="line">        map.put(&quot;success&quot;,success);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 成功返回特定的状态码和信息</span><br><span class="line">     * */</span><br><span class="line">    public final static Map&lt;String, Object&gt; result(ResultEnum respCode, String jwtToken, Boolean success) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(&quot;jwtToken&quot;,jwtToken);</span><br><span class="line">        map.put(&quot;code&quot;, respCode.getCode());</span><br><span class="line">        map.put(&quot;message&quot;, respCode.getMessage());</span><br><span class="line">        map.put(&quot;data&quot;, null);</span><br><span class="line">        map.put(&quot;success&quot;,success);</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边考虑到了多种情况下的返回格式，运用了多态，其中jwtToken的返回在后面Token鉴权中会有用到，这边就先这么写了，<br>code，message用ResultEnum枚举类封装如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.Enums;</span><br><span class="line"></span><br><span class="line">public enum ResultEnum &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(101,&quot;成功&quot;),</span><br><span class="line">    FAILURE(102,&quot;失败&quot;),</span><br><span class="line">    USER_NEED_AUTHORITIES(201,&quot;用户未登录&quot;),</span><br><span class="line">    USER_LOGIN_FAILED(202,&quot;用户账号或密码错误&quot;),</span><br><span class="line">    USER_LOGIN_SUCCESS(203,&quot;用户登录成功&quot;),</span><br><span class="line">    USER_NO_ACCESS(204,&quot;用户无权访问&quot;),</span><br><span class="line">    USER_LOGOUT_SUCCESS(205,&quot;用户登出成功&quot;),</span><br><span class="line">    TOKEN_IS_BLACKLIST(206,&quot;此token为黑名单&quot;),</span><br><span class="line">    LOGIN_IS_OVERDUE(207,&quot;登录已失效&quot;),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line">    private String message;</span><br><span class="line"></span><br><span class="line">    ResultEnum(Integer code, String message) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMessage() &#123;</span><br><span class="line">        return message;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 通过code返回枚举</span><br><span class="line">     * @param code</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static ResultEnum parse(int code)&#123;</span><br><span class="line">        ResultEnum[] values = values();</span><br><span class="line">        for (ResultEnum value : values) &#123;</span><br><span class="line">            if(value.getCode() == code)&#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw  new RuntimeException(&quot;Unknown code of ResultEnum&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.service;</span><br><span class="line"></span><br><span class="line">import com.sjiay.permission.entity.DemoEntity;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface DemoService &#123;</span><br><span class="line">    List&lt;DemoEntity&gt; getUser();</span><br><span class="line">    void register(String username, String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Impl:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.service.impl;</span><br><span class="line"></span><br><span class="line">import com.sjiay.permission.entity.DemoEntity;</span><br><span class="line">import com.sjiay.permission.mapper.DemoMapper;</span><br><span class="line">import com.sjiay.permission.service.DemoService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class DemoServiceImpl implements DemoService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DemoMapper demoMapper;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;DemoEntity&gt; getUser() &#123;</span><br><span class="line">        return demoMapper.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void register(String username, String password) &#123;</span><br><span class="line">        //因为只是简单注册，故只是对密码加密保存，其他就不添加进来了</span><br><span class="line">        //BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();</span><br><span class="line">        //String EncryptedPassword = bCryptPasswordEncoder.encode(password);</span><br><span class="line">        demoMapper.register(username,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.mapper;</span><br><span class="line"></span><br><span class="line">import com.sjiay.permission.entity.DemoEntity;</span><br><span class="line">import org.apache.ibatis.annotations.Param;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public interface DemoMapper &#123;</span><br><span class="line">    List&lt;DemoEntity&gt; getUser();</span><br><span class="line">    void register(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的DemoMapper.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.sjiay.permission.mapper.DemoMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;getUser&quot; resultType=&quot;com.sjiay.permission.entity.DemoEntity&quot;&gt;</span><br><span class="line">        SELECT * FROM girl</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;register&quot; parameterType=&quot;String&quot;&gt;</span><br><span class="line">        &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;java.lang.Long&quot;&gt;</span><br><span class="line">            SELECT LAST_INSERT_ID()</span><br><span class="line">        &lt;/selectKey&gt;</span><br><span class="line">        insert into user (username, password)</span><br><span class="line">        values (#&#123;username,jdbcType=VARCHAR&#125;, #&#123;password,jdbcType=VARCHAR&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.entity;</span><br><span class="line"></span><br><span class="line">public class DemoEntity &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private String name;</span><br><span class="line">    private Float feight;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Float getFeight() &#123;</span><br><span class="line">        return feight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFeight(Float feight) &#123;</span><br><span class="line">        this.feight = feight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类中的get,set方法可以使用Lombok插件的@Data注解让其在编译时自动生成，这边还是写完整了，<br>在实际项目中可以减少不少代码量，数据库中的主要有两个表，一个girl表和DemoEntity字段名一样就可以，<br>另外一个user表主要有username和password就可以，具体脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `girl`;</span><br><span class="line">CREATE TABLE `girl`  (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `age` int(10) NULL DEFAULT NULL,</span><br><span class="line">  `name` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `height` float(10, 2) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user`  (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &apos;用户名&apos;,</span><br><span class="line">  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &apos;密码&apos;,</span><br><span class="line">  `sex` int(11) NULL DEFAULT NULL COMMENT &apos;性别（1=男；2=女）&apos;,</span><br><span class="line">  `is_active` int(11) NULL DEFAULT 1 COMMENT &apos;是否有效（1=是；0=否）&apos;,</span><br><span class="line">  `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `update_time` timestamp(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE INDEX `idx_user_name`(`username`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = &apos;用户信息表&apos; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure><p>OK我们访问<a href="http://localhost:8080/permission/test/getUser看一下结果" target="_blank" rel="noopener">http://localhost:8080/permission/test/getUser看一下结果</a><br><img src="../../../../images/test1.jpg" alt="访问结果"></p><p><img src="../../../../images/test2.jpg" alt="访问结果"><br>成功获取到结果，注册也成功完成，接下来我们在这基础上来引入SpringSercurity实现相应的拦截</p><h1 id="三、SpringSecurity"><a href="#三、SpringSecurity" class="headerlink" title="三、SpringSecurity"></a>三、SpringSecurity</h1><h2 id="引入相关依赖"><a href="#引入相关依赖" class="headerlink" title="引入相关依赖"></a>引入相关依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="注册密码加密"><a href="#注册密码加密" class="headerlink" title="注册密码加密"></a>注册密码加密</h2><p>在进行用户注册时，我们使用了BCryptPasswordEncoder对密码进行了加密之后再进行入库，其中<br>BCryptPasswordEncoder类是SpringSecurity类提供的的加密算法，主要使用BCrypt强哈希方<br>法来加密密码，使每次加密的结果都不一样，具体加密实现没有深入研究，也可使用自定义加<br>密算法来加密，只需修改DemoServiceImpl如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.service.impl;</span><br><span class="line"></span><br><span class="line">import com.sjiay.permission.entity.DemoEntity;</span><br><span class="line">import com.sjiay.permission.mapper.DemoMapper;</span><br><span class="line">import com.sjiay.permission.service.DemoService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class DemoServiceImpl implements DemoService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DemoMapper demoMapper;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;DemoEntity&gt; getUser() &#123;</span><br><span class="line">        return demoMapper.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void register(String username, String password) &#123;</span><br><span class="line">        //因为只是简单注册，故只是对密码加密保存，其他就不添加进来了</span><br><span class="line">        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();</span><br><span class="line">        String EncryptedPassword = bCryptPasswordEncoder.encode(password);</span><br><span class="line">        demoMapper.register(username,EncryptedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现SpringSecurity各个核心接口，处理用户各种状态"><a href="#实现SpringSecurity各个核心接口，处理用户各种状态" class="headerlink" title="实现SpringSecurity各个核心接口，处理用户各种状态"></a>实现SpringSecurity各个核心接口，处理用户各种状态</h2><p>实现AuthenticationEntryPoint接口，处理用户未登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.security;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.sjiay.common.VO.ResultVO;</span><br><span class="line">import com.sjiay.common.Enums.ResultEnum;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class AjaxAuthenticationEntryPoint implements AuthenticationEntryPoint &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &#123;</span><br><span class="line">        httpServletResponse.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ResultVO.result(ResultEnum.USER_NEED_AUTHORITIES,false)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现AccessDeniedHandler接口，处理无权登录的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.security;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.sjiay.common.VO.ResultVO;</span><br><span class="line">import com.sjiay.common.Enums.ResultEnum;</span><br><span class="line">import org.springframework.security.access.AccessDeniedException;</span><br><span class="line">import org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class AjaxAccessDeniedHandler implements AccessDeniedHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e) throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        httpServletResponse.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ResultVO.result(ResultEnum.USER_NO_ACCESS,false)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现AuthenticationFailureHandler接口，处理用户登录失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.security;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.sjiay.common.VO.ResultVO;</span><br><span class="line">import com.sjiay.common.Enums.ResultEnum;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class AjaxAuthenticationFailureHandler implements AuthenticationFailureHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &#123;</span><br><span class="line">        httpServletResponse.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ResultVO.result(ResultEnum.USER_LOGIN_FAILED,false)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现AuthenticationSuccessHandler接口，处理登录成功的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.security;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.deceen.common.Enums.ResultEnum;</span><br><span class="line">import com.deceen.common.VO.ResultVO;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"> </span><br><span class="line">@Component</span><br><span class="line">public class AjaxAuthenticationSuccessHandler implements AuthenticationSuccessHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException &#123;</span><br><span class="line">        SelfUserDetails userDetails = (SelfUserDetails) authentication.getPrincipal();</span><br><span class="line"> </span><br><span class="line">        String jwtToken = JwtTokenUtil.generateToken(userDetails.getUsername(), 1500);</span><br><span class="line">httpServletResponse.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ResultVO.result(ResultEnum.USER_LOGIN_SUCCESS,jwtToken,true)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用JwtTokenUtil工具类生成token后面会有具体实现，这边就不展开了</p><p>实现LogoutSuccessHandler接口，处理退出成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.security;</span><br><span class="line"> </span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.deceen.common.Enums.ResultEnum;</span><br><span class="line">import com.deceen.common.VO.ResultVO;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class AjaxLogoutSuccessHandler implements LogoutSuccessHandler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException &#123;</span><br><span class="line">        httpServletResponse.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">httpServletResponse.getWriter().write(JSON.toJSONString(ResultVO.result(ResultEnum.USER_LOGOUT_SUCCESS,true)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现UserDetails实现自定义对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.entity;</span><br><span class="line"></span><br><span class="line">import org.springframework.security.core.GrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  定义user对象</span><br><span class="line"> */</span><br><span class="line">public class SelfUserDetails implements UserDetails, Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 7171722954972237961L;</span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private Set&lt;? extends GrantedAuthority&gt; authorities;</span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        return this.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAuthorities(Set&lt;? extends GrantedAuthority&gt; authorities) &#123;</span><br><span class="line">        this.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;// 最重点Ⅰ</span><br><span class="line">        return this.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getUsername() &#123;// 最重点Ⅱ</span><br><span class="line">        return this.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //账号是否过期</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //账号是否锁定</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonLocked() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //账号凭证是否未过期</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCredentialsNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEnabled() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权限访问控制"><a href="#权限访问控制" class="headerlink" title="权限访问控制"></a>权限访问控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.security;</span><br><span class="line"></span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: 权限访问控制</span><br><span class="line"> */</span><br><span class="line">@Component(&quot;rbacauthorityservice&quot;)</span><br><span class="line">public class RbacAuthorityService &#123;</span><br><span class="line">    public boolean hasPermission(HttpServletRequest request, Authentication authentication) &#123;</span><br><span class="line"></span><br><span class="line">        Object userInfo = authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        boolean hasPermission  = false;</span><br><span class="line"></span><br><span class="line">        if (userInfo instanceof UserDetails) &#123;</span><br><span class="line"></span><br><span class="line">            String username = ((UserDetails) userInfo).getUsername();</span><br><span class="line"></span><br><span class="line">            //获取资源</span><br><span class="line">            Set&lt;String&gt; urls = new HashSet();</span><br><span class="line">            // 这些 url 都是要登录后才能访问，且其他的 url 都不能访问！</span><br><span class="line">//application.yml里设置的context-path</span><br><span class="line">            urls.add(&quot;/permission/**&quot;);</span><br><span class="line">            Set set2 = new HashSet();</span><br><span class="line">            Set set3 = new HashSet();</span><br><span class="line"></span><br><span class="line">            AntPathMatcher antPathMatcher = new AntPathMatcher();</span><br><span class="line"></span><br><span class="line">            for (String url : urls) &#123;</span><br><span class="line">                if (antPathMatcher.match(url, request.getRequestURI())) &#123;</span><br><span class="line">                    hasPermission = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return hasPermission;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的url记得改成application.yml里设置的context-path，用于整体性的路径控制</p><h2 id="JWT生成Token的工具类"><a href="#JWT生成Token的工具类" class="headerlink" title="JWT生成Token的工具类"></a>JWT生成Token的工具类</h2><p>相关依赖上面已经说过这边不在说明，实现工具类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.utils;</span><br><span class="line"></span><br><span class="line">import io.jsonwebtoken.Claims;</span><br><span class="line">import io.jsonwebtoken.Jwts;</span><br><span class="line">import io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.security.KeyStore;</span><br><span class="line">import java.security.PrivateKey;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @description: jwt生成token</span><br><span class="line"> */</span><br><span class="line">public class JwtTokenUtil &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private static RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    // 寻找证书文件</span><br><span class="line">    private static InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;jwt.jks&quot;); // 寻找证书文件</span><br><span class="line">    private static PrivateKey privateKey = null;</span><br><span class="line">    private static PublicKey publicKey = null;</span><br><span class="line"></span><br><span class="line">    static &#123; // 将证书文件里边的私钥公钥拿出来</span><br><span class="line">        try &#123;</span><br><span class="line">            KeyStore keyStore = KeyStore.getInstance(&quot;JKS&quot;); // java key store 固定常量</span><br><span class="line">            keyStore.load(inputStream, &quot;123456&quot;.toCharArray());</span><br><span class="line">            privateKey = (PrivateKey) keyStore.getKey(&quot;jwt&quot;, &quot;123456&quot;.toCharArray()); // jwt 为 命令生成整数文件时的别名</span><br><span class="line">            publicKey = keyStore.getCertificate(&quot;jwt&quot;).getPublicKey();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成token</span><br><span class="line">     * @param subject （主体信息）</span><br><span class="line">     * @param expirationSeconds 过期时间（秒）</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String generateToken(String subject, int expirationSeconds,Map&lt;String,Object&gt; claims) &#123;</span><br><span class="line">        return Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setExpiration(new Date(System.currentTimeMillis() + expirationSeconds * 1000))</span><br><span class="line">//                .signWith(SignatureAlgorithm.HS512, salt) // 不使用公钥私钥</span><br><span class="line">                .signWith(SignatureAlgorithm.RS256, privateKey)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @author: zzx</span><br><span class="line">     * @date: 2018-10-19 09:10</span><br><span class="line">     * @deprecation: 解析token,获得subject中的信息</span><br><span class="line">     */</span><br><span class="line">    public static String parseToken(String token, String salt) &#123;</span><br><span class="line">        String subject = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            /*Claims claims = Jwts.parser()</span><br><span class="line">//                    .setSigningKey(salt) // 不使用公钥私钥</span><br><span class="line">                    .setSigningKey(publicKey)</span><br><span class="line">                    .parseClaimsJws(token).getBody();*/</span><br><span class="line">            subject = getTokenBody(token).getSubject();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取token自定义属性</span><br><span class="line">    public static Map&lt;String,Object&gt; getClaims(String token)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; claims = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            claims = getTokenBody(token);</span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 是否已过期</span><br><span class="line">    public static boolean isExpiration(String expirationTime)&#123;</span><br><span class="line">        //return getTokenBody(token).getExpiration().before(new Date());</span><br><span class="line">        //通过redis中的失效时间进行判断</span><br><span class="line">        String currentTime = DateUtil.getTime();</span><br><span class="line">        if(DateUtil.compareDate(currentTime,expirationTime))&#123;</span><br><span class="line">            //当前时间比过期时间小，失效</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Claims getTokenBody(String token)&#123;</span><br><span class="line">        return Jwts.parser()</span><br><span class="line">                .setSigningKey(publicKey)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文中的jwt.jks是jwt证书，你可以自己生成，也可以用我生产好的在github项目中的resource目录下找<br>这边简单说一下思路：每次登陆成功会返回token给前端做本地保存，以后每一次前端请求api都会在请<br>求头中带上这个token，我们后面加入一个过滤器，专门拦截token然后验证。针对token暴露的问题，是<br>实现一个黑名单，每一次登出或失效的token都加入黑名单（这一块我用redis实现，用其他缓存数据库都<br>行，就是一个思路的问题）。token生成的时候也会在redis加入相应刷新时间和失效时间（例如：7天免<br>登陆，即在7天内会自动刷新用户的token；而失效时间定为十五分钟，即每个token只有15分钟有效时间，<br>过了这个时间，会去判断是否在刷新时间内，如果是，则refresh token，并set进request的请求头之中）</p><h2 id="jwt拦截器"><a href="#jwt拦截器" class="headerlink" title="jwt拦截器"></a>jwt拦截器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.filters;</span><br><span class="line"> </span><br><span class="line">import com.deceen.common.utils.JwtTokenUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line">import org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * @description: 确保在一次请求只通过一次filter，而不需要重复执行</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class JwtAuthenticationTokenFilter extends OncePerRequestFilter &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    SelfUserDetailsService userDetailsService;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</span><br><span class="line">        String authHeader = request.getHeader(&quot;Authorization&quot;);</span><br><span class="line"> </span><br><span class="line">        if (authHeader != null &amp;&amp; authHeader.startsWith(&quot;Bearer &quot;)) &#123;</span><br><span class="line">            String authToken = authHeader.substring(&quot;Bearer &quot;.length());</span><br><span class="line"> </span><br><span class="line">            String username = JwtTokenUtil.parseToken(authToken, &quot;_secret&quot;);</span><br><span class="line"> </span><br><span class="line">            if (username != null &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == null) &#123;</span><br><span class="line"> </span><br><span class="line">                UserDetails userDetails = userDetailsService.loadUserByUsername(username);</span><br><span class="line">                if (userDetails != null) &#123;</span><br><span class="line">                    UsernamePasswordAuthenticationToken authentication =</span><br><span class="line">                                new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());</span><br><span class="line">                    authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));</span><br><span class="line"> </span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用到了SelfUserDetailsService，主要是用来做一个用户认证，接下来是相关实现</p><h2 id="springsecurity核心处理"><a href="#springsecurity核心处理" class="headerlink" title="springsecurity核心处理"></a>springsecurity核心处理</h2><p>SelfUserDetailsService实现，继承自UserDetailsService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.service;</span><br><span class="line"></span><br><span class="line">import com.sjiay.permission.entity.SelfUserDetails;</span><br><span class="line">import com.sjiay.permission.mapper.UserMapper;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.GrantedAuthority;</span><br><span class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用户认证、权限</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class SelfUserDetailsService implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">        //通过username查询用户</span><br><span class="line">        SelfUserDetails user = userMapper.getUser(username);</span><br><span class="line">        if(user == null)&#123;</span><br><span class="line">            //仍需要细化处理</span><br><span class="line">            throw new UsernameNotFoundException(&quot;该用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set authoritiesSet = new HashSet();</span><br><span class="line">        // 模拟从数据库中获取用户角色</span><br><span class="line">        GrantedAuthority authority = new SimpleGrantedAuthority(&quot;ROLE_ADMIN&quot;);</span><br><span class="line"></span><br><span class="line">        authoritiesSet.add(authority);</span><br><span class="line">        user.setAuthorities(authoritiesSet);</span><br><span class="line"></span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper以及对应xml实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.permission.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.sjiay.permission.entity.SelfUserDetails;</span><br><span class="line">import org.apache.ibatis.annotations.Param;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    //通过username查询用户</span><br><span class="line">    SelfUserDetails getUser(@Param(&quot;username&quot;)  String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.sjiay.permission.mapper.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;com.sjiay.permission.entity.SelfUserDetails&quot;&gt;</span><br><span class="line">        SELECT * FROM user</span><br><span class="line">         where username = #&#123;username&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>security核心处理类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.common.config;</span><br><span class="line"></span><br><span class="line">import com.sjiay.common.security.*;</span><br><span class="line">import com.sjiay.common.filters.JwtAuthenticationTokenFilter;</span><br><span class="line">import com.sjiay.permission.service.SelfUserDetailsService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class SpringSecurityConf extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    //未登陆时返回 JSON 格式的数据给前端（否则为 html）</span><br><span class="line">    @Autowired</span><br><span class="line">    AjaxAuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    //登录成功返回的 JSON 格式数据给前端（否则为 html）</span><br><span class="line">    @Autowired</span><br><span class="line">    AjaxAuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">    //登录失败返回的 JSON 格式数据给前端（否则为 html）</span><br><span class="line">    @Autowired</span><br><span class="line">    AjaxAuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    //注销成功返回的 JSON 格式数据给前端（否则为 登录时的 html）</span><br><span class="line">    @Autowired</span><br><span class="line">    AjaxLogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    //无权访问返回的 JSON 格式数据给前端（否则为 403 html 页面）</span><br><span class="line">    @Autowired</span><br><span class="line">    AjaxAccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    // 自定义user</span><br><span class="line">    @Autowired</span><br><span class="line">    SelfUserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    // JWT 拦截器</span><br><span class="line">    @Autowired</span><br><span class="line">    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">     protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">//        auth.inMemoryAuthentication().</span><br><span class="line">//                passwordEncoder(new MyPasswordEncoder()).</span><br><span class="line">//                withUser(&quot;admin&quot;).password(&quot;123456&quot;).roles(&quot;ADMIN&quot;);</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        //去掉CSRF</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)// 使用 JWT，关闭token</span><br><span class="line">                .and()</span><br><span class="line"></span><br><span class="line">                .httpBasic().authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()//定义哪些URL需要被保护、哪些不需要被保护</span><br><span class="line">//                .antMatchers(&quot;/test/register&quot;)//允许匿名注册</span><br><span class="line">//                .permitAll()</span><br><span class="line">                .anyRequest()//任何请求,登录后可以访问</span><br><span class="line">                .access(&quot;@rbacauthorityservice.hasPermission(request,authentication)&quot;)// RBAC 动态 url 认证</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()//开启登录, 定义当需要用户登录时候，转到的登录页面</span><br><span class="line">        //        .loginPage(&quot;/test/login.html&quot;)</span><br><span class="line">        //        .loginProcessingUrl(&quot;/login&quot;)</span><br><span class="line">                .successHandler(authenticationSuccessHandler)//登录成功</span><br><span class="line">                .failureHandler(authenticationFailureHandler)//登录失败</span><br><span class="line">                .permitAll()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .logout()//默认注销行为为logout</span><br><span class="line">                .logoutUrl(&quot;/logout&quot;)</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                .permitAll();</span><br><span class="line">        //记住我</span><br><span class="line">        http.rememberMe().rememberMeParameter(&quot;remember-me&quot;)</span><br><span class="line">                .userDetailsService(userDetailsService).tokenValiditySeconds(1000);</span><br><span class="line"></span><br><span class="line">        http.exceptionHandling().accessDeniedHandler(accessDeniedHandler);// 无权访问 JSON 格式的数据</span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok,我们开始使用postman进行测试<br>登录成功<br><img src="../../../../images/login.jpg" alt="访问结果"></p><p>复制返回的token值，进行getUser测试</p><p><img src="../../../../images/test3.jpg" alt="访问结果"></p><p>请求成功！</p><h1 id="四、集成日志logback"><a href="#四、集成日志logback" class="headerlink" title="四、集成日志logback"></a>四、集成日志logback</h1><h1 id="五、集成redis"><a href="#五、集成redis" class="headerlink" title="五、集成redis"></a>五、集成redis</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本项目是SpringBoot+Mybatis实现的后端项目,相关测试都使用postman进行了测试，主要的思想是利用token&lt;br&gt;作为前后端交互身份验证信息，通过设置token的刷新时间来保证token的安全性，同时将token放入redis中，&lt;br&gt;并建立黑名单，将过期以及登出的token移到黑名单，使用SpringSecurity实现对用户的认证鉴权。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://Sjiay1023.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Spring" scheme="https://Sjiay1023.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成通用mapper</title>
    <link href="https://Sjiay1023.github.io/2019/08/26/SpringBoot%E9%9B%86%E6%88%90%E9%80%9A%E7%94%A8mapper/"/>
    <id>https://Sjiay1023.github.io/2019/08/26/SpringBoot集成通用mapper/</id>
    <published>2019-08-26T08:35:22.000Z</published>
    <updated>2019-08-28T07:04:02.385Z</updated>
    
    <content type="html"><![CDATA[<p>原先使用的mybatis-generator-core会生成大量example的文件影响后期维护以及数据库的迁移，<br>所以考虑对用通用mapper项目做一次啊重构减少项目代码的耦合性，以下是具体流程以及重构过<br>程各中遇到的坑。<br>[官方文档]（<a href="https://mapperhelper.github.io/docs/）" target="_blank" rel="noopener">https://mapperhelper.github.io/docs/）</a></p><a id="more"></a><p>#主要环境<br>编译器使用IDEA，数据库使用Mysql8.0.14，构建工具使用gradle</p><h1 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springBootVersion = &apos;2.1.2.RELEASE&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &apos;java&apos;</span><br><span class="line">apply plugin: &apos;org.springframework.boot&apos;</span><br><span class="line">apply plugin: &apos;io.spring.dependency-management&apos;</span><br><span class="line"></span><br><span class="line">group = &apos;mhh&apos;</span><br><span class="line">version = &apos;1.0&apos;</span><br><span class="line">sourceCompatibility = &apos;1.8&apos;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    set(&apos;springCloudVersion&apos;, &apos;Greenwich.RC2&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    runtimeOnly &apos;mysql:mysql-connector-java&apos;</span><br><span class="line">    testImplementation &apos;org.springframework.boot:spring-boot-starter-test&apos;</span><br><span class="line">    compile group: &apos;org.mybatis.generator&apos;, name: &apos;mybatis-generator-core&apos;, version: &apos;1.3.5&apos;</span><br><span class="line">    compile group: &apos;tk.mybatis&apos;, name: &apos;mapper&apos;, version: &apos;4.0.3&apos;</span><br><span class="line">    compile group: &apos;com.github.pagehelper&apos;, name: &apos;pagehelper-spring-boot-starter&apos;, version: &apos;1.2.5&apos;</span><br><span class="line">    compile group: &apos;com.alibaba&apos;, name: &apos;druid-spring-boot-starter&apos;, version: &apos;1.1.10&apos;</span><br><span class="line">    compile group: &apos;org.springframework&apos;, name: &apos;spring-jdbc&apos;, version: &apos;5.1.4.RELEASE&apos;</span><br><span class="line">&#125;</span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom &quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bootJar &#123;</span><br><span class="line">    destinationDir = rootProject.file(&apos;build/libs&apos;)</span><br><span class="line">    archiveName = &apos;app.jar&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、创建BaseMapper"><a href="#二、创建BaseMapper" class="headerlink" title="二、创建BaseMapper"></a>二、创建BaseMapper</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.demo.config;</span><br><span class="line"></span><br><span class="line">import tk.mybatis.mapper.common.Mapper;</span><br><span class="line">import tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * BaseMapper继承通用mapper</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">public interface BaseMapper&lt;T&gt; extends Mapper&lt;T&gt;, MySqlMapper&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：上面创建的接口不能被@MapperScan扫描到，否则会报错，因为继承了通用mapper，会有很多<br>相应的方法，被扫描到以后，mybatis发现没有一个xml配置文件或者相应方法没有进行实现，这时候<br>就会报错Mapper3提供的所有方法可查看[官方文档]（<a href="https://mapperhelper.github.io/docs/）" target="_blank" rel="noopener">https://mapperhelper.github.io/docs/）</a></p><h1 id="三、配置application-yml"><a href="#三、配置application-yml" class="headerlink" title="三、配置application.yml"></a>三、配置application.yml</h1> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 30020</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: Asia/Shanghai</span><br><span class="line">  application:</span><br><span class="line">    name: demo</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://xxx.xxx.xx.xx:3306/db_name?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><br><span class="line">    username: db_username</span><br><span class="line">    password: db_password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath*:/mappers/**/*Mapper.xml</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    use-generated-keys: true</span><br><span class="line">    default-fetch-size: 100</span><br><span class="line">    default-statement-timeout: 30</span><br><span class="line"></span><br><span class="line">mapper:</span><br><span class="line">  #mappers 多个接口时逗号隔开</span><br><span class="line">  mappers: com.sjiay.demo.config.BaseMapper</span><br><span class="line">  not-empty: false</span><br><span class="line">  identity: MYSQL</span><br></pre></td></tr></table></figure><h1 id="四、自动化生成配置"><a href="#四、自动化生成配置" class="headerlink" title="四、自动化生成配置"></a>四、自动化生成配置</h1><h2 id="generatorConfig-xml配置"><a href="#generatorConfig-xml配置" class="headerlink" title="generatorConfig.xml配置"></a>generatorConfig.xml配置</h2><p>在resource目录下增加generatorConfig.xml文件<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- context:运行环境，包含大部分的配置信息</span><br><span class="line">        id：这个运行环境的唯一标示</span><br><span class="line">        targetRuntime：配置生成代码风格。默认就是MyBatis3，还可以设置MyBatis3Simple，这里使用MyBatis3Simple不会生成example等复杂条件</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;context id=&quot;testContext&quot; targetRuntime=&quot;MyBatis3Simple&quot; defaultModelType=&quot;flat&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;!--注意配置useMapperCommentGenerator，避免生成较多无用注解，此处也支持自定义注解以及版本差异在此处的配置不一样，建议使用4.0+--&gt;</span><br><span class="line">        &lt;property name=&quot;useMapperCommentGenerator&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;plugin type=&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;&gt;</span><br><span class="line">&lt;!--配置上一步设置的BaseMapper，使之后生成的具体业务mapper自动继承自BaseMapper--&gt;</span><br><span class="line">            &lt;property name=&quot;mappers&quot; value=&quot;com.com.sjiay.config.BaseMapper&quot; /&gt;</span><br><span class="line">            &lt;!--caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true--&gt;</span><br><span class="line">            &lt;property name=&quot;caseSensitive&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;forceAnnotation&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否去除日期注释 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接的信息：驱动类、连接地址、表名 、用户名、密码 ,此处也可通过读取配置文件的方式来设置--&gt;</span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">                driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">                connectionURL=&quot;jdbc:mysql://xxx.xxx.xx.xx:3306/db_name&quot;</span><br><span class="line">                userId=&quot;db_username&quot;</span><br><span class="line">                password=&quot;db_password&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 默认false,会根据数据精度来判断转换为Java什么类型。推荐</span><br><span class="line">            为 true时会强制把数据库Decimal、Numeric数据类型解析为java.math.BigDecimal</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- javaModelGenerator:有关实体类的配置</span><br><span class="line">                targetPackage:生成实体类所在包</span><br><span class="line">                targetProject:生成POJO类的位置</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.sjiay.demo.entity&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;!-- 是否根据表schema生成子包 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否清理 从数据库返回的值前后的空格 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- sqlMapGenerator：有关映射文件的配置，属性跟上面的javaModelGenerator类似</span><br><span class="line">                targetPackage：指定mapper.xml所在包名</span><br><span class="line">                targetProject：指定在项目中存放的位置，因为是maven工程，所以放在resource下。</span><br><span class="line">                最终Mapper.xml文件的目录就是 src/main/resources下的mappers目录下</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mappers&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- javaClientGenerator：有关Mapper接口的配置，属性跟上面的javaModelGenerator类似</span><br><span class="line">                type=&quot;XMLMAPPER&quot;：设置以XML格式生成映射而非注解</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.sjiay.demo..mapper&quot;</span><br><span class="line">                             targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 指定数据库表</span><br><span class="line">            catalog：数据库里的catalog</span><br><span class="line">            tableName：表的名称</span><br><span class="line">            domainObjectName：指定表对应生成实体类的名称</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;table tableName=&quot;demo_user&quot; domainObjectName=&quot;user&quot;&gt;</span><br><span class="line">            &lt;!-- 设置自增ID的回显功能 --&gt;</span><br><span class="line">            &lt;!--&lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot;/&gt;--&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></p><h2 id="新建自动生成工具类"><a href="#新建自动生成工具类" class="headerlink" title="新建自动生成工具类"></a>新建自动生成工具类</h2><p> 在SpringBoot同级目录新建GeneratorTest.java类，当然也可在其他项目，此类会覆盖原先改动，所以慎重运行！<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> package com.sjiay.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line">import org.mybatis.generator.config.Configuration;</span><br><span class="line">import org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line">import org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author o_0sky</span><br><span class="line"> * @date 2019/6/20 18:01</span><br><span class="line"> */</span><br><span class="line">public class GeneratorTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        String today = &quot;2019-08-14&quot;;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        Date now = sdf.parse(today);</span><br><span class="line">        Date d = new Date();</span><br><span class="line"></span><br><span class="line">        if (d.getTime() &gt; now.getTime() + 1000 * 60 * 60 * 24) &#123;</span><br><span class="line">            System.err.println(&quot;——————未成成功运行——————&quot;);</span><br><span class="line">            System.err.println(&quot;——————未成成功运行——————&quot;);</span><br><span class="line">            System.err.println(&quot;本程序具有破坏作用，应该只运行一次，如果必须要再运行，需要修改today变量为今天，如:&quot; + sdf.format(new Date()));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (false)</span><br><span class="line">            return;</span><br><span class="line">        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();</span><br><span class="line">        // 是否覆盖以前生成的重复代码</span><br><span class="line">        boolean overwrite = true;</span><br><span class="line">        // 配置文件的资源路径，会去classpath下找。maven项目中，就是resource下</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(&quot;generatorConfig.xml&quot;);</span><br><span class="line">        // 配置解析器</span><br><span class="line">        ConfigurationParser cp = new ConfigurationParser(warnings);</span><br><span class="line">        // 加载配置文件，并解析</span><br><span class="line">        Configuration config = cp.parseConfiguration(in);</span><br><span class="line">        DefaultShellCallback callback = new DefaultShellCallback(overwrite);</span><br><span class="line">        // 获取MBG对象</span><br><span class="line">        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        // 生成代码</span><br><span class="line">        myBatisGenerator.generate(null);</span><br><span class="line">        for (String warning : warnings) &#123;</span><br><span class="line">            System.out.println(warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行GeneratorTest类，会在entity包下生成实体，mapper包下生成mapper接口，以及resources下mappers目录下对应的mapper.xml文件</p><h1 id="五、配置SpringBoot启动类"><a href="#五、配置SpringBoot启动类" class="headerlink" title="五、配置SpringBoot启动类"></a>五、配置SpringBoot启动类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.mhh.menzhengljk;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line">@MapperScan(value = &quot;com.sjiay.demo.mapper&quot;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：此处要扫描对应生成的mapper接口，MapperScan是tk.mybatis.spring.annotation.MapperScan,而不是org下的MapperScan。</p><h1 id="六、实体"><a href="#六、实体" class="headerlink" title="六、实体"></a>六、实体</h1><h2 id="公共实体封装"><a href="#公共实体封装" class="headerlink" title="公共实体封装"></a>公共实体封装</h2><p>在实际项目中会会传一些公共参数，如时间区间，分页参数每页显示的行数和显示第几行等，<br>此处使用BaseEntity进行封装，然后让自动生成的实体类继承这个公共实体，算是对原先实<br>体的一个扩展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.demo.entity;</span><br><span class="line"></span><br><span class="line">import javax.persistence.Transient;</span><br><span class="line">import javax.validation.constraints.NotEmpty;</span><br><span class="line"></span><br><span class="line">public class BaseEntity &#123;</span><br><span class="line"></span><br><span class="line">    @NotEmpty</span><br><span class="line">    @Transient</span><br><span class="line">    private String riqi1;</span><br><span class="line"></span><br><span class="line">    @NotEmpty</span><br><span class="line">    @Transient</span><br><span class="line">    private String riqi2;</span><br><span class="line"></span><br><span class="line">    @Transient</span><br><span class="line">    private Integer rows;</span><br><span class="line"></span><br><span class="line">    @Transient</span><br><span class="line">    private Integer page;</span><br><span class="line"></span><br><span class="line">    public String getRiqi1() &#123;</span><br><span class="line">        return riqi1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRiqi1(String riqi1) &#123;</span><br><span class="line">        this.riqi1 = riqi1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getRiqi2() &#123;</span><br><span class="line">        return riqi2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRiqi2(String riqi2) &#123;</span><br><span class="line">        this.riqi2 = riqi2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getRows() &#123;</span><br><span class="line">        return rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRows(Integer rows) &#123;</span><br><span class="line">        this.rows = rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getPage() &#123;</span><br><span class="line">        return page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPage(Integer page) &#123;</span><br><span class="line">        this.page = page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务实体实现"><a href="#业务实体实现" class="headerlink" title="业务实体实现"></a>业务实体实现</h2><p>对应生成的实体类让其继承上面的公共实体类，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.mhh.menzhengljk.entity;</span><br><span class="line"></span><br><span class="line">import javax.persistence.Table;</span><br><span class="line"></span><br><span class="line">@Table(name = &quot;user&quot;)</span><br><span class="line">public class user extends BaseEntity&#123;</span><br><span class="line"></span><br><span class="line">    private Integer userid;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    private String chushengrq;</span><br><span class="line"></span><br><span class="line"> public Integer getUserid() &#123;</span><br><span class="line">        return userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserid(Integer userid) &#123;</span><br><span class="line">        this.userid = userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getChushengrq() &#123;</span><br><span class="line">        return chushengrq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setChushengrq(String chushengrq) &#123;</span><br><span class="line">        this.chushengrq = chushengrq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处对出生日期做一个区间查询，我这边业务要求上日期使用了String，一般是可以直接用date去存储。</p><h1 id="七、Service实现"><a href="#七、Service实现" class="headerlink" title="七、Service实现"></a>七、Service实现</h1><h2 id="公共Service封装"><a href="#公共Service封装" class="headerlink" title="公共Service封装"></a>公共Service封装</h2><p>你当然可以在controller中注入mapper进行开发，而在实际开发过程中一般都会使用Service做一些逻辑判断，<br>以及事务的控制，这里主要简单对加了通用mapper之后怎么封装做了演示，主要是让所有Service继承一个<br>BaseService，这样就可以保证所有Service都有通用mapper的方法。</p><p>公共Servicee接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.demo.service.base;</span><br><span class="line"></span><br><span class="line">import com.sjiay.demo.entity.BaseEntity;</span><br><span class="line">import org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface BaseService &lt;T extends BaseEntity&gt;&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 只获取一条数据，当查询的结果多于一条数据时抛出异常。如果只想获取检索结果的第一条数据请一部 @see selectFirst</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    T selectOne(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询返回数据列表</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;T&gt; select(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据主键查询</span><br><span class="line">     *</span><br><span class="line">     * @param pk 主键</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    T selectByPrimaryKey(Object pk);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询返回数据条数</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int selectCount(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询返回所有数据列表</span><br><span class="line">     *</span><br><span class="line">     * @param</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;T&gt; selectAll();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据条件查询返回数据列表</span><br><span class="line">     *</span><br><span class="line">     * @param example</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;T&gt; selectByExample(Object example);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Example条件进行查询总数</span><br><span class="line">     *</span><br><span class="line">     * @param example</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int selectCountByExample(Object example);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Example条件更新实体record包含的全部属性，null值会被更新</span><br><span class="line">     *</span><br><span class="line">     * @param record example</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int updateByExample(@Param(&quot;record&quot;) T record, @Param(&quot;example&quot;) Object example);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Example条件更新实体record包含的不是null的属性值</span><br><span class="line">     *</span><br><span class="line">     * @param record example</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int updateByExampleSelective(@Param(&quot;record&quot;) T record, @Param(&quot;example&quot;) Object example);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Example条件删除数据</span><br><span class="line">     *</span><br><span class="line">     * @param example</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int deleteByExample(Object example);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存一个实体，null的属性也会保存，不会使用数据库默认值</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int insert(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存一个实体，null的属性不会保存，会使用数据库默认值</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int insertSelective(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 插入列表，空属性不会插入</span><br><span class="line">     *</span><br><span class="line">     * @param recordList</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int insertListSelective(List&lt;T&gt; recordList);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据主键更新实体全部字段，null值会被更新</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int updateByPrimaryKey(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据主键更新属性不为null的值</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int updateByPrimaryKeySelective(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据实体属性作为条件进行删除，查询条件使用等号</span><br><span class="line">     *</span><br><span class="line">     * @param record</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int delete(T record);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据主键字段进行删除，方法参数必须包含完整的主键属性</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    int deleteByPrimaryKey(Object key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公共Service具体实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.demo.service.base.impl;</span><br><span class="line"></span><br><span class="line">import com.sjiay.demo.config.BaseMapper;</span><br><span class="line">import com.sjiay.demo.entity.BaseEntity;</span><br><span class="line">import com.sjiay.demo.service.base.BaseService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">@Service</span><br><span class="line">public class BaseServiceImpl&lt;T extends BaseEntity&gt;  implements BaseService&lt;T&gt; &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private BaseMapper&lt;T&gt; baseMapper;</span><br><span class="line">    @Override</span><br><span class="line">    public T selectOne(T record) &#123;</span><br><span class="line">        return  baseMapper.selectOne(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;T&gt; select(T record) &#123;</span><br><span class="line">        return baseMapper.select(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public T selectByPrimaryKey(Object pk) &#123;</span><br><span class="line">        if (pk == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return baseMapper.selectByPrimaryKey(pk);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int selectCount(T record) &#123;</span><br><span class="line">        return baseMapper.selectCount(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;T&gt; selectAll() &#123;</span><br><span class="line">        return baseMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;T&gt; selectByExample(Object example) &#123;</span><br><span class="line">        return  baseMapper.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int selectCountByExample(Object example) &#123;</span><br><span class="line">        return  baseMapper.selectCountByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateByExample(T record, Object example) &#123;</span><br><span class="line">        return  baseMapper.updateByExample(record,example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateByExampleSelective(T record, Object example) &#123;</span><br><span class="line">        return  baseMapper.updateByExampleSelective(record,example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int deleteByExample(Object example) &#123;</span><br><span class="line">        return  baseMapper.deleteByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int insert(T record) &#123;</span><br><span class="line">        return  baseMapper.insert(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int insertSelective(T record) &#123;</span><br><span class="line">        return  baseMapper.insertSelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int insertListSelective(List&lt;T&gt; recordList) &#123;</span><br><span class="line">        for (T record : recordList) &#123;</span><br><span class="line">            baseMapper.insertSelective(record);</span><br><span class="line">        &#125;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateByPrimaryKey(T record) &#123;</span><br><span class="line">        return  baseMapper.updateByPrimaryKey(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateByPrimaryKeySelective(T record) &#123;</span><br><span class="line">        return  baseMapper.updateByPrimaryKeySelective(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int delete(T record) &#123;</span><br><span class="line">        return  baseMapper.delete(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int deleteByPrimaryKey(Object key) &#123;</span><br><span class="line">        return baseMapper.deleteByPrimaryKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务Service实现"><a href="#业务Service实现" class="headerlink" title="业务Service实现"></a>业务Service实现</h2><p>将通用mapper中一些常用的方法进行实现，业务Service此处就省略（需要继承公共Service接口）<br>具体业务类的Service可实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.demo.service.wszy.impl;</span><br><span class="line"></span><br><span class="line">import com.sjiay.demo.entity.user;</span><br><span class="line">import com.sjiay.demo.service.base.impl.BaseServiceImpl;</span><br><span class="line">import com.sjiay.demo.service.wszy.UserService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl extends BaseServiceImpl&lt;user&gt; implements UserService &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在只有通用方法时就不需要加任何方法，是不是显得特别简约方便。</p><h1 id="八、测试一下"><a href="#八、测试一下" class="headerlink" title="八、测试一下"></a>八、测试一下</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.sjiay.demo.controller;</span><br><span class="line"></span><br><span class="line">import com.dongfang.mhh.mhhbase.ResMsg;</span><br><span class="line">import com.dongfang.mhh.mhhbase.ResMsgpage;</span><br><span class="line">import com.github.pagehelper.PageHelper;</span><br><span class="line">import com.github.pagehelper.PageInfo;</span><br><span class="line">import com.sjiay.demo.service.wszy.UserService;</span><br><span class="line">import com.sjiay.demo.entity.XzyyFuwujg;</span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">import tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/demo&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取用户列表</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/getUserList&quot;)</span><br><span class="line">    public ResMsgpage getJgxxList(@RequestBody User user) &#123;</span><br><span class="line">        Example example = new Example(User.class);</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andBetween(&quot;chushengrq&quot;,user.getRiqi1(),user.getRiqi2());</span><br><span class="line">        example.and(criteria);</span><br><span class="line">        PageHelper.startPage(user.getPage(), user.getRows(), true);</span><br><span class="line">        List&lt;User&gt; userList = userService.selectByExample(example);</span><br><span class="line">        PageInfo&lt;User&gt; pageInfo=new PageInfo&lt;User&gt;(userList);</span><br><span class="line">        Long page = Long.valueOf(user.getPage());</span><br><span class="line">        Long total = Long.valueOf(pageInfo.getPages());</span><br><span class="line">        return new ResMsgpage(userList,page,pageInfo.getTotal(),total);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实际项目中上面的返回结果集都做过封装，简单使用可直接通过List来返回，<br>上述过程都是亲测成功，如有需要用到通用mapper的欢迎参考。上述内容纯<br>属个人总结，如有错误欢迎拍砖！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原先使用的mybatis-generator-core会生成大量example的文件影响后期维护以及数据库的迁移，&lt;br&gt;所以考虑对用通用mapper项目做一次啊重构减少项目代码的耦合性，以下是具体流程以及重构过&lt;br&gt;程各中遇到的坑。&lt;br&gt;[官方文档]（&lt;a href=&quot;https://mapperhelper.github.io/docs/）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mapperhelper.github.io/docs/）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://Sjiay1023.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Spring" scheme="https://Sjiay1023.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>第一个博客</title>
    <link href="https://Sjiay1023.github.io/2019/08/19/me-first-blog/"/>
    <id>https://Sjiay1023.github.io/2019/08/19/me-first-blog/</id>
    <published>2019-08-19T10:25:11.000Z</published>
    <updated>2019-08-20T09:13:33.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器写博客-一级标题-对应"><a href="#欢迎使用Markdown编辑器写博客-一级标题-对应" class="headerlink" title="欢迎使用Markdown编辑器写博客    //一级标题 对应  "></a>欢迎使用Markdown编辑器写博客    //一级标题 对应 <h1> </h1></h1><h2 id="标题输入-二级标题-对应"><a href="#标题输入-二级标题-对应" class="headerlink" title="标题输入                     //二级标题 对应  "></a>标题输入                     //二级标题 对应 <h2> </h2></h2><h3 id="三级标题-三级标题-对应"><a href="#三级标题-三级标题-对应" class="headerlink" title="三级标题                    //三级标题 对应  "></a>三级标题                    //三级标题 对应 <h3> </h3></h3><h4 id="四级标题-四级标题-对应"><a href="#四级标题-四级标题-对应" class="headerlink" title="四级标题                   //四级标题 对应  "></a>四级标题                   //四级标题 对应 <h4> </h4></h4><h5 id="五级标题-五级标题-对应"><a href="#五级标题-五级标题-对应" class="headerlink" title="五级标题                  //五级标题 对应  "></a>五级标题                  //五级标题 对应 <h5> </h5></h5><h6 id="六级标题-六级标题-对应"><a href="#六级标题-六级标题-对应" class="headerlink" title="六级标题                 //六级标题 对应  "></a>六级标题                 //六级标题 对应 <h6> </h6></h6><p>####### 七级标题                //抱歉，木有了（但是他会影响生成的目录，目录行多出一行空行）</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Hello World!</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>列1</th><th>列2</th><th>列3</th></tr></thead><tbody><tr><td>第1行</td><td>12</td><td>13</td></tr><tr><td>第2行</td><td>22</td><td>23</td></tr><tr><td>第3行</td><td>32</td><td>33</td></tr></tbody></table><p><em>斜体</em>， <strong>粗体</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欢迎使用Markdown编辑器写博客-一级标题-对应&quot;&gt;&lt;a href=&quot;#欢迎使用Markdown编辑器写博客-一级标题-对应&quot; class=&quot;headerlink&quot; title=&quot;欢迎使用Markdown编辑器写博客    //一级标题 对应  &quot;&gt;&lt;/a&gt;欢迎使用Markdown编辑器写博客    //一级标题 对应 &lt;h1&gt; &lt;/h1&gt;&lt;/h1&gt;&lt;h2 id=&quot;标题输入-二级标题-对应&quot;&gt;&lt;a href=&quot;#标题输入-二级标题-对应&quot; class=&quot;headerlink&quot; title=&quot;标题输入                     //二级标题 对应  &quot;&gt;&lt;/a&gt;标题输入                     //二级标题 对应 &lt;h2&gt; &lt;/h2&gt;&lt;/h2&gt;&lt;h3 id=&quot;三级标题-三级标题-对应&quot;&gt;&lt;a href=&quot;#三级标题-三级标题-对应&quot; class=&quot;headerlink&quot; title=&quot;三级标题                    //三级标题 对应  &quot;&gt;&lt;/a&gt;三级标题                    //三级标题 对应 &lt;h3&gt; &lt;/h3&gt;&lt;/h3&gt;&lt;h4 id=&quot;四级标题-四级标题-对应&quot;&gt;&lt;a href=&quot;#四级标题-四级标题-对应&quot; class=&quot;headerlink&quot; title=&quot;四级标题                   //四级标题 对应  &quot;&gt;&lt;/a&gt;四级标题                   //四级标题 对应 &lt;h4&gt; &lt;/h4&gt;&lt;/h4&gt;&lt;h5 id=&quot;五级标题-五级标题-对应&quot;&gt;&lt;a href=&quot;#五级标题-五级标题-对应&quot; class=&quot;headerlink&quot; title=&quot;五级标题                  //五级标题 对应  &quot;&gt;&lt;/a&gt;五级标题                  //五级标题 对应 &lt;h5&gt; &lt;/h5&gt;&lt;/h5&gt;&lt;h6 id=&quot;六级标题-六级标题-对应&quot;&gt;&lt;a href=&quot;#六级标题-六级标题-对应&quot; class=&quot;headerlink&quot; title=&quot;六级标题                 //六级标题 对应  &quot;&gt;&lt;/a&gt;六级标题                 //六级标题 对应 &lt;h6&gt; &lt;/h6&gt;&lt;/h6&gt;&lt;p&gt;####### 七级标题                //抱歉，木有了（但是他会影响生成的目录，目录行多出一行空行）&lt;/p&gt;
    
    </summary>
    
      <category term="个人" scheme="https://Sjiay1023.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="https://Sjiay1023.github.io/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://Sjiay1023.github.io/2019/08/19/hello-world/"/>
    <id>https://Sjiay1023.github.io/2019/08/19/hello-world/</id>
    <published>2019-08-19T08:37:14.431Z</published>
    <updated>2019-08-20T05:59:59.775Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
